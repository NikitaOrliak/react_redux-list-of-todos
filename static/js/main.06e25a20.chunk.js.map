{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","query","status","InitialState","filterReducer","filter","toLowerCase","todos","todosReducer","rootReducer","combineReducers","currentTodo","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","filteredTodos","useMemo","newTodos","title","includes","completed","length","className","map","id","isCurrentTodo","classNames","onClick","currentTodoActions","handleSelectTodo","TodoFilter","useState","setQuery","onSubmit","event","preventDefault","onChange","filterActions","target","value","placeholder","text","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","isLoader","setIsLoader","user","setUser","useEffect","userId","finally","href","email","name","App","setTodosActions","Root","ReactDOM","render","document","getElementById"],"mappings":"oOAoBaA,EANG,SAACC,GAAD,MAAgC,CAC9CC,KAAM,kBACNC,QAASF,IAIED,EARM,iBAAyB,CAAEE,KAAM,uBA6BrCE,EAhBY,WAGd,IAFXC,EAEU,uDAFK,KACfC,EACU,uCACV,OAAQA,EAAOJ,MACb,IAAK,kBACH,OAAOI,EAAOH,QAEhB,IAAK,qBACH,OAAO,KAET,QACE,OAAOE,I,OCjBAL,EAfI,SAACO,GAAD,MACf,CAAEL,KAAM,eAAgBC,QAASI,IActBP,EAXK,SAACQ,GAAD,MAChB,CAAEN,KAAM,gBAAiBC,QAASK,IAY9BC,EAAe,CACnBF,MAAO,GACPC,OAAQ,OAyBKE,EAtBO,WAGT,IAFXC,EAEU,uDAFMF,EAChBH,EACU,uCACV,OAAQA,EAAOJ,MACb,IAAK,gBACH,OAAO,2BACFS,GADL,IAEEH,OAAQF,EAAOH,UAGnB,IAAK,eACH,OAAO,2BACFQ,GADL,IAEEJ,MAAOD,EAAOH,QAAQS,gBAG1B,QACE,OAAOD,I,OCnCAX,EAJI,SAACa,GAAD,MACf,CAAEX,KAAM,YAAaC,QAASU,IAkBjBC,EAbM,WAGP,IAFZD,EAEW,uDAFK,GAChBP,EACW,uCACX,MACO,cADCA,EAAOJ,KAEL,GAAN,mBAAWW,GAAX,YAAqBP,EAAOH,UAGrBU,GCbPE,EAAcC,0BAAgB,CAClCC,YAAab,EACbO,OAAQD,EACRG,MAAOC,IAIII,EAAQC,sBACnBJ,EACAK,8BACEC,0BAAgBC,O,6CCfPC,EAAoCC,IACpCC,EAAkDC,I,OCGlDC,EAAqB,WAChC,IAAMC,EAAWL,IACXN,EAAcQ,GAAe,SAAApB,GAAK,OAAIA,EAAMY,eAC5CJ,EAAQY,GAAe,SAAApB,GAAK,OAAIA,EAAMQ,SACtCF,EAASc,GAAe,SAAApB,GAAK,OAAIA,EAAMM,UAEvCkB,EAAgBC,mBAAQ,WAC5B,IAAIC,EAAQ,YAAOlB,GAQnB,OANIF,EAAOJ,QACTwB,EAAWA,EAASpB,QAClB,SAAAV,GAAI,OAAIA,EAAK+B,MAAMpB,cAAcqB,SAAStB,EAAOJ,WAI7CI,EAAOH,QACb,IAAK,SACH,OAAOuB,EAASpB,QAAO,SAAAV,GAAI,OAAKA,EAAKiC,aAEvC,IAAK,YACH,OAAOH,EAASpB,QAAO,SAAAV,GAAI,OAAIA,EAAKiC,aAEtC,QACE,OAAOH,KAEV,CAACpB,IAMJ,OACE,mCAEKkB,EAAcM,OAKb,wBAAOC,UAAU,+BAAjB,UACE,gCACE,+BACE,mCAEA,6BACE,sBAAMA,UAAU,OAAhB,SACE,mBAAGA,UAAU,qBAIjB,uCACA,wCAIJ,gCAEIP,EAAcQ,KAAI,SAAApC,GAChB,IACEqC,EAGErC,EAHFqC,GACAN,EAEE/B,EAFF+B,MACAE,EACEjC,EADFiC,UAGIK,EAAgBD,KAAE,OAAKrB,QAAL,IAAKA,OAAL,EAAKA,EAAaqB,IAE1C,OACE,qBAEE,UAAQ,OACRF,UAAWI,IAAW,CACpB,4BAA6BD,IAJjC,UAOE,oBAAIH,UAAU,eAAd,SAA8BE,IAC9B,oBAAIF,UAAU,eAAd,SACGF,GACC,sBAAME,UAAU,OAAO,UAAQ,gBAA/B,SAA+C,mBAAGA,UAAU,qBAIhE,oBAAIA,UAAU,2BAAd,SACE,mBAAGA,UAAWI,IAAW,CACvB,mBAAoBN,EACpB,mBAAoBA,IAFtB,SAKGF,MAIL,oBAAII,UAAU,8BAAd,SACE,wBACE,UAAQ,eACRA,UAAU,SACVlC,KAAK,SACLuC,QAAS,kBArER,SAACxC,GACxB2B,EAASc,EAA2BzC,IAoEC0C,CAAiB1C,IAJlC,SAME,sBAAMmC,UAAU,OAAhB,SACE,mBAAGA,UAAWI,IAAW,MAAO,CAC9B,UAAWD,EACX,eAAgBA,cAjCnBD,WAjCjB,mBAAGF,UAAU,0BAAb,oECrCGQ,EAAuB,WAClC,MAA0BC,mBAAiB,IAA3C,mBAAOtC,EAAP,KAAcuC,EAAd,KACMlB,EAAWL,IAoBjB,OACE,uBACEa,UAAU,mBACVW,SAAU,SAAAC,GAAK,OAAIA,EAAMC,kBAF3B,UAIE,mBAAGb,UAAU,UAAb,SACE,sBAAMA,UAAU,SAAhB,SACE,yBACE,UAAQ,eACRc,SA3BiB,SACzBF,GAEApB,EAASuB,EAAwBH,EAAMI,OAAOC,SAsBxC,UAIE,wBAAQA,MAAM,MAAd,iBAGA,wBAAQA,MAAM,SAAd,oBAGA,wBAAQA,MAAM,YAAd,8BAON,oBAAGjB,UAAU,qDAAb,UACE,uBACE,UAAQ,cACRlC,KAAK,OACLkC,UAAU,QACVkB,YAAY,YACZD,MAAO9C,EACP2C,SA3CkB,SAACF,GACzB,IAAMO,EAAOP,EAAMI,OAAOC,MAE1BP,EAASS,GACT3B,EAASuB,EAAuBI,OAyC5B,sBAAMnB,UAAU,eAAhB,SACE,mBAAGA,UAAU,gCAIX7B,GACA,sBAAM6B,UAAU,gBAAgBoB,MAAO,CAAEC,cAAe,OAAxD,SAEE,wBACE,UAAQ,oBACRvD,KAAK,SACLkC,UAAU,SACVK,QAlDW,WACvBK,EAAS,IACTlB,EAASuB,EAAuB,iBCrBvBO,G,MAAmB,kBAC9B,qBAAKtB,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,wBCOnB,SAASuB,EAAOC,GAEd,IARYC,EAQNC,EAVS,iEAUYF,EAAM,QAEjC,OAVYC,EAUA,IATL,IAAIE,SAAQ,SAAAC,GACjBC,WAAWD,EAASH,OASnBK,MAAK,kBAAMC,MAAML,MACjBI,MAAK,SAAAE,GAAG,OAAIA,EAAIC,UAGd,ICdMC,EAAsB,WACjC,MAAgCzB,oBAAkB,GAAlD,mBAAO0B,EAAP,KAAiBC,EAAjB,KACA,EAAwB3B,qBAAxB,mBAAO4B,EAAP,KAAaC,EAAb,KACM9C,EAAWL,IACXN,EAAcQ,GAAe,SAAApB,GAAK,OAAIA,EAAMY,eAElD0D,qBAAU,WDUW,IAACC,ECTpBJ,GAAY,GAERvD,IDOgB2D,ECNV3D,EAAY2D,ODMiBjB,EAAG,iBAAiBiB,KCLtDV,KAAKQ,GACLG,SAAQ,kBAAML,GAAY,QAE9B,IAMH,OACE,mCAEIvD,GACE,sBAAKmB,UAAU,kBAAkB,UAAQ,QAAzC,UACE,qBAAKA,UAAU,qBAGbmC,GACE,cAAC,EAAD,IAKFE,GACE,sBAAKrC,UAAU,aAAf,UACE,yBAAQA,UAAU,kBAAlB,UACE,qBACEA,UAAU,0CACV,UAAQ,eAFV,yBAIYnB,EAAYqB,MAIxB,wBACEpC,KAAK,SACLkC,UAAU,SACV,UAAQ,cACRK,QAjCY,WAC9Bb,EAASc,WAoCK,sBAAKN,UAAU,kBAAf,UACE,mBACEA,UAAU,QACV,UAAQ,cAFV,SAIGnB,EAAYe,QAGf,oBAAGI,UAAU,QAAQ,UAAQ,aAA7B,UAEInB,EAAYiB,UAER,wBAAQE,UAAU,mBAAlB,kBAEA,wBAAQA,UAAU,kBAAlB,qBAGL,OACD,mBAAG0C,KAAI,iBAAYL,EAAKM,OAAxB,SAAkCN,EAAKO,sBCjEhDC,EAAgB,WAC3B,MAAgCpC,oBAAkB,GAAlD,mBAAO0B,EAAP,KAAiBC,EAAjB,KACM3D,EAAQY,GAAe,SAAApB,GAAK,OAAIA,EAAMQ,SACtCI,EAAcQ,GAAe,SAAApB,GAAK,OAAIA,EAAMY,eAC5CW,EAAWL,IAUjB,OARAoD,qBAAU,WACRH,GAAY,GFCcb,EAAY,UEEnCO,MAAK,SAAAF,GAAO,OAAIpC,EAASsD,EAAyBlB,OAClDa,SAAQ,kBAAML,GAAY,QAC5B,IAGD,qCACE,qBAAKpC,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,oBAGEmC,GACE,cAAC,EAAD,MAKA1D,EAAMsB,QACN,qCACE,qBAAKC,UAAU,QAAf,SACE,cAAC,EAAD,MAEF,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,gBAUZnB,GACE,cAAC,EAAD,QCjDJkE,EAAO,kBACX,cAAC,IAAD,CAAUjE,MAAOA,EAAjB,SACE,cAAC,IAAD,UACE,cAAC,EAAD,SAKNkE,IAASC,OAAO,cAAC,EAAD,IAAUC,SAASC,eAAe,W","file":"static/js/main.06e25a20.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null; // ?\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetQueryAction = { type: 'filter/QUERY', payload: string };\ntype SetStatusAction = { type: 'filter/STATUS', payload: Status };\n\nconst setQuery = (query: string): SetQueryAction => (\n  { type: 'filter/QUERY', payload: query }\n);\n\nconst setStatus = (status: Status): SetStatusAction => (\n  { type: 'filter/STATUS', payload: status }\n);\n\ntype State = {\n  query: string,\n  status: Status,\n};\n\ntype Action = SetQueryAction | SetStatusAction;\n\nexport const actions = { setQuery, setStatus };\n\nconst InitialState = {\n  query: '',\n  status: 'all' as Status,\n};\n\nconst filterReducer = (\n  filter: State = InitialState,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'filter/STATUS':\n      return {\n        ...filter,\n        status: action.payload,\n      };\n\n    case 'filter/QUERY':\n      return {\n        ...filter,\n        query: action.payload.toLowerCase(),\n      };\n\n    default:\n      return filter;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = { type: 'todos/SET', payload: Todo[] };\n\ntype Action = SetTodosAction;\n\nconst setTodos = (todos: Todo[]): SetTodosAction => (\n  { type: 'todos/SET', payload: todos }\n);\n\nexport const actions = { setTodos };\n\nconst todosReducer = (\n  todos: Todo[] = [],\n  action: Action,\n): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return [...todos, ...action.payload];\n\n    default:\n      return todos;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React, { useMemo } from 'react';\nimport classNames from 'classnames';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const todos = useAppSelector(state => state.todos);\n  const filter = useAppSelector(state => state.filter);\n\n  const filteredTodos = useMemo(() => {\n    let newTodos = [...todos];\n\n    if (filter.query) {\n      newTodos = newTodos.filter(\n        todo => todo.title.toLowerCase().includes(filter.query),\n      );\n    }\n\n    switch (filter.status) {\n      case 'active':\n        return newTodos.filter(todo => !todo.completed);\n\n      case 'completed':\n        return newTodos.filter(todo => todo.completed);\n\n      default:\n        return newTodos;\n    }\n  }, [filter]); // todos?\n\n  const handleSelectTodo = (todo: Todo) => {\n    dispatch(currentTodoActions.setTodo(todo));\n  };\n\n  return (\n    <>\n      {\n        !filteredTodos.length ? (\n          <p className=\"notification is-warning\">\n            There are no todos matching current filter criteria\n          </p>\n        ) : (\n          <table className=\"table is-narrow is-fullwidth\">\n            <thead>\n              <tr>\n                <th>#</th>\n\n                <th>\n                  <span className=\"icon\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                </th>\n\n                <th>Title</th>\n                <th> </th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {\n                filteredTodos.map(todo => {\n                  const {\n                    id,\n                    title,\n                    completed,\n                  } = todo;\n\n                  const isCurrentTodo = id === currentTodo?.id;\n\n                  return (\n                    <tr\n                      key={id}\n                      data-cy=\"todo\"\n                      className={classNames({\n                        'has-background-info-light': isCurrentTodo,\n                      })}\n                    >\n                      <td className=\"is-vcentered\">{id}</td>\n                      <td className=\"is-vcentered\">\n                        {completed && (\n                          <span className=\"icon\" data-cy=\"iconCompleted\"><i className=\"fas fa-check\" /></span>\n                        )}\n                      </td>\n\n                      <td className=\"is-vcentered is-expanded\">\n                        <p className={classNames({\n                          'has-text-success': completed,\n                          'has-text-danger': !completed,\n                        })}\n                        >\n                          {title}\n                        </p>\n                      </td>\n\n                      <td className=\"has-text-right is-vcentered\">\n                        <button\n                          data-cy=\"selectButton\"\n                          className=\"button\"\n                          type=\"button\"\n                          onClick={() => handleSelectTodo(todo)}\n                        >\n                          <span className=\"icon\">\n                            <i className={classNames('far', {\n                              'fa-eye': !isCurrentTodo,\n                              'fa-eye-slash': isCurrentTodo,\n                            })}\n                            />\n                          </span>\n                        </button>\n                      </td>\n                    </tr>\n                  );\n                })\n              }\n\n              {/* <tr data-cy=\"todo\">\n                <td className=\"is-vcentered\">2</td>\n                <td className=\"is-vcentered\"> </td>\n\n                <td className=\"is-vcentered is-expanded\">\n                  <p className=\"has-text-danger\">quis ut nam facilis et officia qui</p>\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button data-cy=\"selectButton\" className=\"button\" type=\"button\">\n                    <span className=\"icon\">\n                      <i className=\"far fa-eye\" />\n                    </span>\n                  </button>\n                </td>\n              </tr>\n\n              <tr data-cy=\"todo\" className=\"has-background-info-light\">\n                <td className=\"is-vcentered\">3</td>\n                <td className=\"is-vcentered\"> </td>\n\n                <td className=\"is-vcentered is-expanded\">\n                  <p className=\"has-text-danger\">fugiat veniam minus</p>\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button data-cy=\"selectButton\" className=\"button\" type=\"button\">\n                    <span className=\"icon\">\n                      <i className=\"far fa-eye-slash\" />\n                    </span>\n                  </button>\n                </td>\n              </tr>\n\n              <tr data-cy=\"todo\">\n                <td className=\"is-vcentered\">4</td>\n                <td className=\"is-vcentered\"><span className=\"icon\" data-cy=\"iconCompleted\"><i className=\"fas fa-check\" /></span></td>\n                <td className=\"is-vcentered is-expanded\">\n                  <p className=\"has-text-success\">et porro tempora</p>\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button data-cy=\"selectButton\" className=\"button\" type=\"button\">\n                    <span className=\"icon\">\n                      <i className=\"far fa-eye\" />\n                    </span>\n                  </button>\n                </td>\n              </tr>\n\n              <tr data-cy=\"todo\">\n                <td className=\"is-vcentered\">5</td>\n                <td className=\"is-vcentered\"> </td>\n\n                <td className=\"is-vcentered is-expanded\">\n                  <p className=\"has-text-danger\">laboriosam mollitia et enim quasi adipisci quia provident illum</p>\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button data-cy=\"selectButton\" className=\"button\" type=\"button\">\n                    <span className=\"icon\">\n                      <i className=\"far fa-eye\" />\n                    </span>\n                  </button>\n                </td>\n              </tr>\n\n              <tr data-cy=\"todo\">\n                <td className=\"is-vcentered\">6</td>\n                <td className=\"is-vcentered\"> </td>\n\n                <td className=\"is-vcentered is-expanded\">\n                  <p className=\"has-text-danger\">qui ullam ratione quibusdam voluptatem quia omnis</p>\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button data-cy=\"selectButton\" className=\"button\" type=\"button\">\n                    <span className=\"icon\">\n                      <i className=\"far fa-eye\" />\n                    </span>\n                  </button>\n                </td>\n              </tr>\n\n              <tr data-cy=\"todo\">\n                <td className=\"is-vcentered\">7</td>\n                <td className=\"is-vcentered\"> </td>\n\n                <td className=\"is-vcentered is-expanded\">\n                  <p className=\"has-text-danger\">illo expedita consequatur quia in</p>\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button data-cy=\"selectButton\" className=\"button\" type=\"button\">\n                    <span className=\"icon\">\n                      <i className=\"far fa-eye\" />\n                    </span>\n                  </button>\n                </td>\n              </tr>\n\n              <tr data-cy=\"todo\">\n                <td className=\"is-vcentered\">8</td>\n\n                <td className=\"is-vcentered\">\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                </td>\n\n                <td className=\"is-vcentered is-expanded\">\n                  <p className=\"has-text-success\">quo adipisci enim quam ut ab</p>\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button data-cy=\"selectButton\" className=\"button\" type=\"button\">\n                    <span className=\"icon\">\n                      <i className=\"far fa-eye\" />\n                    </span>\n                  </button>\n                </td>\n              </tr>\n\n              <tr data-cy=\"todo\">\n                <td className=\"is-vcentered\">9</td>\n                <td className=\"is-vcentered\"> </td>\n\n                <td className=\"is-vcentered is-expanded\">\n                  <p className=\"has-text-danger\">molestiae perspiciatis ipsa</p>\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button data-cy=\"selectButton\" className=\"button\" type=\"button\">\n                    <span className=\"icon\">\n                      <i className=\"far fa-eye\" />\n                    </span>\n                  </button>\n                </td>\n              </tr>\n\n              <tr data-cy=\"todo\">\n                <td className=\"is-vcentered\">10</td>\n\n                <td className=\"is-vcentered\">\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                </td>\n\n                <td className=\"is-vcentered is-expanded\">\n                  <p className=\"has-text-success\">illo est ratione doloremque quia maiores aut</p>\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button data-cy=\"selectButton\" className=\"button\" type=\"button\">\n                    <span className=\"icon\">\n                      <i className=\"far fa-eye\" />\n                    </span>\n                  </button>\n                </td>\n              </tr> */}\n            </tbody>\n          </table>\n        )\n      }\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport { useAppDispatch } from '../../app/hooks';\nimport { Status } from '../../types/Status';\nimport { actions as filterActions } from '../../features/filter';\n\nexport const TodoFilter: React.FC = () => {\n  const [query, setQuery] = useState<string>('');\n  const dispatch = useAppDispatch();\n\n  const handleSelectStatus = (\n    event: React.ChangeEvent<HTMLSelectElement>,\n  ) => {\n    dispatch(filterActions.setStatus(event.target.value as Status));\n  };\n\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const text = event.target.value;\n\n    setQuery(text);\n    dispatch(filterActions.setQuery(text));\n  };\n\n  const handleResetQuery = () => {\n    setQuery('');\n    dispatch(filterActions.setQuery(''));\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={handleSelectStatus}\n          >\n            <option value=\"all\">\n              All\n            </option>\n            <option value=\"active\">\n              Active\n            </option>\n            <option value=\"completed\">\n              Completed\n            </option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleChangeQuery}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {\n          !!query && (\n            <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                data-cy=\"clearSearchButton\"\n                type=\"button\"\n                className=\"delete\"\n                onClick={handleResetQuery}\n              />\n            </span>\n          )\n        }\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\nexport const TodoModal: React.FC = () => {\n  const [isLoader, setIsLoader] = useState<boolean>(false);\n  const [user, setUser] = useState<User>();\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  useEffect(() => {\n    setIsLoader(true);\n\n    if (currentTodo) {\n      getUser(currentTodo.userId)\n        .then(setUser)\n        .finally(() => setIsLoader(false));\n    }\n  }, []);\n\n  const handleRemoveCurrentTodo = () => {\n    dispatch(currentTodoActions.removeTodo());\n  };\n\n  return (\n    <>\n      {\n        currentTodo && (\n          <div className=\"modal is-active\" data-cy=\"modal\">\n            <div className=\"modal-background\" />\n\n            {\n              isLoader && (\n                <Loader />\n              )\n            }\n\n            {\n              user && (\n                <div className=\"modal-card\">\n                  <header className=\"modal-card-head\">\n                    <div\n                      className=\"modal-card-title has-text-weight-medium\"\n                      data-cy=\"modal-header\"\n                    >\n                      {`Todo #${currentTodo.id}`}\n                    </div>\n\n                    {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n                    <button\n                      type=\"button\"\n                      className=\"delete\"\n                      data-cy=\"modal-close\"\n                      onClick={handleRemoveCurrentTodo}\n                    />\n                  </header>\n\n                  <div className=\"modal-card-body\">\n                    <p\n                      className=\"block\"\n                      data-cy=\"modal-title\"\n                    >\n                      {currentTodo.title}\n                    </p>\n\n                    <p className=\"block\" data-cy=\"modal-user\">\n                      {\n                        currentTodo.completed\n                          ? (\n                            <strong className=\"has-text-success\">Done</strong>\n                          ) : (\n                            <strong className=\"has-text-danger\">Planned</strong>\n                          )\n                      }\n                      {' by '}\n                      <a href={`mailto:${user.email}`}>{user.name}</a>\n                    </p>\n                  </div>\n                </div>\n              )\n            }\n          </div>\n        )\n      }\n    </>\n\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { actions as setTodosActions } from './features/todos';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\n\nexport const App: React.FC = () => {\n  const [isLoader, setIsLoader] = useState<boolean>(false);\n  const todos = useAppSelector(state => state.todos);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    setIsLoader(true);\n\n    getTodos()\n      .then(resolve => dispatch(setTodosActions.setTodos(resolve)))\n      .finally(() => setIsLoader(false));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            {\n              isLoader && (\n                <Loader />\n              )\n            }\n\n            {\n              !!todos.length && (\n                <>\n                  <div className=\"block\">\n                    <TodoFilter />\n                  </div>\n                  <div className=\"block\">\n                    <TodoList />\n                  </div>\n                </>\n              )\n            }\n          </div>\n        </div>\n      </div>\n\n      {\n        currentTodo && (\n          <TodoModal />\n        )\n      }\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}